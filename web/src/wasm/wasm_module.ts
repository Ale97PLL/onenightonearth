// This file was auto-generated by night-math/generate_interface.zig
export type pointer = number;
export enum WasmPrimative {
    bool,
    u8,
    u16,
    u32,
    u64,
    i8,
    i16,
    i32,
    i64,
    f32,
    f64,
}

export type Sized<T> = {
    [K in keyof T]: WasmPrimative;
};

/**
* Get the number of bytes needed to store a given `WasmPrimative`.
* @param data The primative type being checked.
*/
export const sizeOfPrimative = (data: WasmPrimative): number => {
    switch (data) {
        case WasmPrimative.bool:
        case WasmPrimative.u8:
        case WasmPrimative.i8:
            return 1;
        case WasmPrimative.u16:
        case WasmPrimative.i16:
            return 2;
        case WasmPrimative.u32:
        case WasmPrimative.i32:
        case WasmPrimative.f32:
            return 4;
        case WasmPrimative.u64:
        case WasmPrimative.i64:
        case WasmPrimative.f64:
            return 8;
        default:
            return data;
    }
};

/**
* Get the total size required of an arbitrary `Allocatable` data type.
* @param type A `Sized` instance of some data type.
*/
export const sizeOf = <T>(type: Sized<T>): number => {
    let size = 0;
    for (const key in type) {
        if (type.hasOwnProperty(key)) {
            size += sizeOfPrimative(type[key] as WasmPrimative);
        }
    }
    return size;
};

export type Coord = {
	latitude: number;
	longitude: number;
};

export const sizedCoord: Sized<Coord> = {
	latitude: WasmPrimative.f32,
	longitude: WasmPrimative.f32,
};

export type SkyCoord = {
	right_ascension: number;
	declination: number;
};

export const sizedSkyCoord: Sized<SkyCoord> = {
	right_ascension: WasmPrimative.f32,
	declination: WasmPrimative.f32,
};

export type ExternStar = {
	right_ascension: number;
	declination: number;
	brightness: number;
	spec_type: number;
};

export const sizedExternStar: Sized<ExternStar> = {
	right_ascension: WasmPrimative.f32,
	declination: WasmPrimative.f32,
	brightness: WasmPrimative.f32,
	spec_type: WasmPrimative.u8,
};

export type Point = {
	x: number;
	y: number;
};

export const sizedPoint: Sized<Point> = {
	x: WasmPrimative.f32,
	y: WasmPrimative.f32,
};

export type ExternCanvasSettings = {
	width: number;
	height: number;
	background_radius: number;
	zoom_factor: number;
	drag_speed: number;
	draw_north_up: number;
	draw_constellation_grid: number;
	draw_asterisms: number;
	zodiac_only: number;
};

export const sizedExternCanvasSettings: Sized<ExternCanvasSettings> = {
	width: WasmPrimative.u32,
	height: WasmPrimative.u32,
	background_radius: WasmPrimative.f32,
	zoom_factor: WasmPrimative.f32,
	drag_speed: WasmPrimative.f32,
	draw_north_up: WasmPrimative.u8,
	draw_constellation_grid: WasmPrimative.u8,
	draw_asterisms: WasmPrimative.u8,
	zodiac_only: WasmPrimative.u8,
};

export type Pixel = {
	r: number;
	g: number;
	b: number;
	a: number;
};

export const sizedPixel: Sized<Pixel> = {
	r: WasmPrimative.u8,
	g: WasmPrimative.u8,
	b: WasmPrimative.u8,
	a: WasmPrimative.u8,
};

export interface WasmModule {
	memory: WebAssembly.Memory;
	initialize: (arg_0: pointer, arg_1: number, arg_2: pointer, arg_3: pointer) => pointer;
	updateCanvasSettings: (arg_0: pointer) => pointer;
	initializeResultData: () => pointer;
	getImageData: () => pointer;
	resetImageData: () => void;
	projectStarsAndConstellations: (arg_0: pointer, arg_1: number, arg_2: number, arg_3: BigInt) => void;
	getConstellationAtPoint: (arg_0: pointer, arg_1: number, arg_2: number, arg_3: number, arg_4: number, arg_5: BigInt) => BigInt;
	dragAndMove: (arg_0: number, arg_1: number, arg_2: number, arg_3: number) => void;
	findWaypoints: (arg_0: number, arg_1: number, arg_2: number, arg_3: number) => pointer;
	getCoordForSkyCoord: (arg_0: number, arg_1: number, arg_2: BigInt) => void;
	getConstellationCentroid: (arg_0: number) => void;
	_wasm_alloc: (arg_0: number) => pointer;
	_wasm_free: (arg_0: pointer, arg_1: number) => void;
};
